#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('zurveys:server');
var http = require('http');
var socketio = require('socket.io');
var count_clients = 0;
var messageRecieved = 0;
var distribution = 50000;
var found = false;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = socketio.listen(server);

/**
 * Listen on provided port, on all network interfaces.
 */


server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
io.on('connection', function(socket){
  count_clients++;
  console.log(count_clients+' user connected');
  //socket.emit('first', {val : "hey getting it"});

  socket.on('feedbackHash', function(data){
    //console.log(data.result);
    messageRecieved++;
    if(data.result != 0 && !found){
        //send back to server
        found = true;
       console.log("In feedbackHash id is "+data.id);
        socket.to(data.id).emit('recev', data);
    }
    if((messageRecieved == (Object.keys(socket.adapter.rooms).length-1)) && (!found)){
      // if(data.result != 0){
      //   //send back to server
      // }else 
      if(data.result == 0){
        distribution = distribution + 50000;
        distData(data);
      }else{
      console.log('Error with Hash Alg');
      }
    }

  })

  socket.on('disconnect', function(data){
    count_clients--;
    console.log('a user got disconnected');
    console.log(count_clients+' user connected');
    //console.log(socket.adapter.rooms);
  });
  
  socket.on('clientData', function(data){
    found = false;
    distData(data);
  })
  
  function distData(data){
    console.log("In distData id is "+data.id);
    var count = 1;
    var numClients = Object.keys(socket.adapter.rooms).length;
    for(var i in Object.keys(socket.adapter.rooms)){
      if(data.id != Object.keys(socket.adapter.rooms)[i]){
      var High = distribution*(count);
      var Low = distribution*(count)-(distribution-1);
      //console.log(Low);
      var range = [Low, High];
      data.range = range;
      socket.to(Object.keys(socket.adapter.rooms)[i]).emit('foo', data);
      count++;
      }
    }
  }
  
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
