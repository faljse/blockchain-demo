#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('zurveys:server');
var http = require('http');
var socketio = require('socket.io');
var count_clients = 0;
var messageRecieved = 0;
var distribution = 50000;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = socketio.listen(server);

/**
 * Listen on provided port, on all network interfaces.
 */


server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
io.on('connection', function(socket){
  count_clients++;
  console.log(count_clients+' user connected');
  console.log("Socket message");
  socket.emit('first', {val : "hey getting it"});

  socket.on('feedbackHash', function(data){
    messageRecieved++;
    if(messageRecieved == Object.keys(socket.adapter.rooms).length){
      if(data.result != 0){
        //send back to server
      }else if(data.result == 0){
        //distribution ++;
        distData(data);
      }else{
      console.log('Error with Hash Alg');
      }
    }

  })

  socket.on('disconnect', function(data){
    count_clients--;
    console.log(count_clients+' user connected');
    console.log('user disconnected');
    console.log(socket.adapter.rooms);
  });
  
  socket.on('clientData', function(data){
    distData(data);
  })
  
  function distData(data){
    var count = 1;
    var numClients = Object.keys(socket.adapter.rooms).length;
    for(var i in Object.keys(socket.adapter.rooms)){
      if(data.id != Object.keys(socket.adapter.rooms)[i]){
      var High = distribution*(count);
      var Low = distribution*(count)-(distribution-1);
      console.log(Low);
      var range = [Low, High];
      data.range = range;
      socket.to(Object.keys(socket.adapter.rooms)[i]).emit('foo', data);
      count++;
      }
    }
  }
  
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
